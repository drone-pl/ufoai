--!usr/bin/lua

--[[
	Code to generate the ufo api.
--]]

local constants = {}
local classes = {}
local functions = {}
local line = string.rep("-", 100) .. "\n"

function generate_api ()
	for k, v in pairs(ufo) do 
		if (type(v) == "table") then
			classes[k] = v
		elseif (type(v) == "function") then
			if (string.sub(k, 1, 3) ~= "UI_") then
				functions[k] = v
			end
		else
			constants[k] = v
		end
	end
end

function print_api_class_member(name)
	if not(string.sub(name, 1, 2) == "__") then
		ufo.print(string.format("\t%s\n", name))
	end
end

function print_api_class_event(name)
	if not(string.sub(name, 1, 2) == "__") then
		ufo.print(string.format("\tevent %s:\n", name))
	end
end

function print_api_class(name, cls)
	ufo.print(string.format("class %s:\n", name))
	local fn = cls[".fn"]
	for k, v in pairs(fn) do
		print_api_class_member(k)
	end
	local get = cls[".get"]
	for k, v in pairs(get) do
		print_api_class_event(k)
	end
end

function print_api_constant(name)
	if not(string.sub(name, 1, 2) == "__") then
		ufo.print(string.format("%s\n", name))
	end
end

function print_api_function(name)
	if not(string.sub(name, 1, 2) == "__") then
		ufo.print(string.format("%s\n", name))
	end
end

function print_api ()
	local reg = debug.getregistry()
	local swig = reg["SWIG"]
	ufo.print(line)
	ufo.print("\tconstants\n")
	ufo.print(line)
	for k, v in pairs(constants) do
		print_api_constant(k)
	end
	ufo.print(line)
	ufo.print("\tclasses\n")
	ufo.print(line)
	for k, v in pairs(classes) do
		local cls = swig[k]
		print_api_class(k, cls)
	end
	ufo.print(line)
	ufo.print("\tfunctions\n")
	ufo.print(line)
	for k, v in pairs(functions) do
		print_api_function(k)
	end
end

-- callback
function load ()
	ufo.print("---------------------- begin api ----------------------------\n")
	generate_api ()
	print_api ()
	ufo.print("---------------------- end api ----------------------------\n")
end
	
-- register callbacks
ufo.register_onload (load)




